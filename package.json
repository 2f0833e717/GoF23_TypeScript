{
  "name": "gof23-typescript",
  "version": "1.0.0",
  "description": "TypeScriptで実装するGoF23デザインパターン",
  "main": "index.js",
  "scripts": {
    "build": "tsc",
    "dev": "ts-node-dev --respawn --transpile-only src/index.ts",
    "start": "node dist/index.js",
    "test": "jest",
    "test:runInBand": "jest --runInBand",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:parallel": "jest --maxWorkers=50%",
    "test:debug": "DEBUG=true jest --verbose",
    "test:ci": "jest --ci --runInBand --detectOpenHandles --forceExit",
    "test:clear": "jest --clearCache && jest",
    "test:coverage:view:win": "node -e \"const { exec } = require('child_process'); const { existsSync } = require('fs'); const path = 'coverage/lcov-report/index.html'; if (!existsSync(path)) { console.error('Error: ' + path + ' does not exist. Please run tests first.'); process.exit(1); } const url = 'file://' + require('path').resolve(path); exec('start ' + url, (err) => { if (err) { console.error('ブラウザでの表示に失敗しました:', err); process.exit(1); } console.log('カバレッジレポートを開きました'); });\"",
    "test:coverage:view:wsl": "node -e \"const { exec } = require('child_process'); const { existsSync } = require('fs'); const path = 'coverage/lcov-report/index.html'; if (!existsSync(path)) { console.error('Error: ' + path + ' does not exist. Please run tests first.'); process.exit(1); } const url = 'file://' + require('path').resolve(path); exec('wslview ' + url, (err) => { if (err) { console.error('ブラウザでの表示に失敗しました:', err); process.exit(1); } console.log('カバレッジレポートを開きました'); });\"",
    "test:coverage:view": "node -e \"const { exec } = require('child_process'); const { existsSync } = require('fs'); const path = 'coverage/lcov-report/index.html'; if (!existsSync(path)) { console.error('Error: ' + path + ' does not exist. Please run tests first.'); process.exit(1); } const url = 'file://' + require('path').resolve(path); const openCommand = process.platform === 'win32' ? 'start' : (process.platform === 'darwin' ? 'open' : 'xdg-open'); exec(`${openCommand} ${url}`, (err) => { if (err) { console.error('ブラウザでの表示に失敗しました:', err); process.exit(1); } console.log('カバレッジレポートを開きました'); });\"",
    "test:view": "npm run test && npm run test:coverage:view",
    "test:view:win": "npm run test && npm run test:coverage:view:win",
    "test:view:wsl": "npm run test && npm run test:coverage:view:wsl",
    "test:clean": "rimraf dist coverage",
    "lint": "eslint . --ext .ts",
    "lint:fix": "eslint . --ext .ts --fix",
    "format": "prettier --write \"src/**/*.ts\" \"tests/**/*.ts\"",
    "docs:api": "typedoc --entryPointStrategy expand --out docs/api src/**/*.ts --exclude \"**/*.test.ts\"",
    "book:create-summary": "node scripts/generate-summary.js",
    "book:build:win": "cd docs && ..\\scripts\\mdbook\\mdbook.exe build",
    "book:build:wsl": "mdbook build",
    "book:serve:win": "npx serve docs/book -p 3000",
    "book:serve:wsl": "npx serve docs/book -p 3000",
    "book:stop:wsl": "pkill -f 'serve docs/book' || true",
    "book:clean": "rimraf docs/book",
    "book:preview:win": "node -e \"const { exec } = require('child_process'); const { existsSync } = require('fs'); const path = 'docs/book/index.html'; if (!existsSync(path)) { console.error('Error: ' + path + ' does not exist. Please run book:build first.'); process.exit(1); } exec('start ' + path, (error) => { if (error) { console.error('Error opening file:', error); process.exit(1); } });\"",
    "book:preview:wsl": "node -e \"const { platform } = require('os'); const { exec } = require('child_process'); const { existsSync } = require('fs'); const path = 'docs/book/index.html'; if (!existsSync(path)) { console.error('Error: ' + path + ' does not exist. Please run book:build first.'); process.exit(1); } const commands = { win32: 'start', darwin: 'open', linux: 'xdg-open' }; const cmd = commands[platform()] || 'xdg-open'; exec(cmd + ' ' + path, (error) => { if (error) { console.error('Error opening file:', error); process.exit(1); } });\"",
    "book:all:win": "npm run docs:api && npm run book:create-summary && npm run book:build:win && npm run book:preview:win",
    "book:all:wsl": "npm run docs:api && npm run book:create-summary && npm run book:build:wsl && npm run book:preview:wsl",
    "reference:all:win": "npm run test:view:win && npm run book:all:win",
    "reference:all:wsl": "npm run test:view:wsl && npm run book:all:wsl"
  },
  "keywords": [
    "typescript",
    "design-patterns",
    "gof"
  ],
  "author": "2f0833e717",
  "license": "MIT",
  "devDependencies": {
    "@kazuph/mcp-fetch": "^1.1.3",
    "@modelcontextprotocol/inspector": "^0.8.0",
    "@modelcontextprotocol/sdk": "^1.8.0",
    "@modelcontextprotocol/server-filesystem": "^2025.3.28",
    "@modelcontextprotocol/server-github": "^2025.3.28",
    "@modelcontextprotocol/server-memory": "^0.6.2",
    "@modelcontextprotocol/server-sequential-thinking": "^0.6.2",
    "@types/jest": "^29.5.12",
    "@types/node": "^20.17.19",
    "@typescript-eslint/eslint-plugin": "^8.24.1",
    "@typescript-eslint/parser": "^8.24.1",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-prettier": "^5.2.3",
    "jest": "^29.7.0",
    "prettier": "^3.5.1",
    "rimraf": "^5.0.10",
    "serve": "^14.2.4",
    "ts-jest": "^29.1.2",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0",
    "typedoc": "^0.25.7",
    "typedoc-plugin-markdown": "^3.17.1"
  },
  "dependencies": {
    "tsc": "^2.0.4"
  },
  "directories": {
    "doc": "docs",
    "example": "examples",
    "test": "tests"
  }
}
