{
  "name": "gof23-typescript",
  "version": "1.0.0",
  "description": "TypeScriptで実装するGoF23デザインパターン",
  "main": "index.js",
  "scripts": {
    "build": "npx tsc",
    "dev": "ts-node-dev --respawn --transpile-only src/index.ts",
    "start": "npm run start:dev",
    "test": "jest",
    "test:runInBand": "jest --runInBand",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:parallel": "jest --maxWorkers=50%",
    "test:debug": "DEBUG=true jest --verbose",
    "test:ci": "jest --ci --runInBand --detectOpenHandles --forceExit",
    "test:clear": "jest --clearCache && jest",
    "test:coverage:view:win": "node -e \"const { exec } = require('child_process'); const { existsSync } = require('fs'); const path = 'coverage/lcov-report/index.html'; if (!existsSync(path)) { console.error('Error: ' + path + ' does not exist. Please run tests first.'); process.exit(1); } const url = 'file://' + require('path').resolve(path); exec('start ' + url, (err) => { if (err) { console.error('ブラウザでの表示に失敗しました:', err); process.exit(1); } console.log('カバレッジレポートを開きました'); });\"",
    "test:coverage:view:wsl": "node -e \"const { exec } = require('child_process'); const { existsSync } = require('fs'); const path = 'coverage/lcov-report/index.html'; if (!existsSync(path)) { console.error('Error: ' + path + ' does not exist. Please run tests first.'); process.exit(1); } const url = 'file://' + require('path').resolve(path); exec('wslview ' + url, (err) => { if (err) { console.error('ブラウザでの表示に失敗しました:', err); process.exit(1); } console.log('カバレッジレポートを開きました'); });\"",
    "test:coverage:view": "node -e \"const { exec } = require('child_process'); const { existsSync } = require('fs'); const path = 'coverage/lcov-report/index.html'; if (!existsSync(path)) { console.error('Error: ' + path + ' does not exist. Please run tests first.'); process.exit(1); } const url = 'file://' + require('path').resolve(path); const openCommand = process.platform === 'win32' ? 'start' : (process.platform === 'darwin' ? 'open' : 'xdg-open'); exec(`${openCommand} ${url}`, (err) => { if (err) { console.error('ブラウザでの表示に失敗しました:', err); process.exit(1); } console.log('カバレッジレポートを開きました'); });\"",
    "test:view": "npm run test && npm run test:coverage:view",
    "test:view:win": "npm run test && npm run test:coverage:view:win",
    "test:view:wsl": "npm run test && npm run test:coverage:view:wsl",
    "test:clean": "rimraf dist coverage",
    "lint": "eslint .",
    "lint:fix": "eslint --fix .",
    "format": "prettier --write \"src/**/*.ts\" \"tests/**/*.ts\"",
    "docs:api": "typedoc --entryPointStrategy expand --out docs/api src/**/*.ts --exclude \"**/*.test.ts\"",
    "book:create-summary": "node scripts/generate-summary.js",
    "book:build:win": "powershell -Command \"cd docs; mdbook build; cd ..\"",
    "book:build:wsl": "cd docs/ && mdbook build && cd ..",
    "book:serve": "powershell -Command \"cd docs; mdbook serve --open\"",
    "book:stop:wsl": "pkill -f 'serve docs/book' || true",
    "book:clean": "rimraf docs/book",
    "book:preview:win": "node -e \"const { exec } = require('child_process'); const { existsSync } = require('fs'); const path = 'docs/book/index.html'; if (!existsSync(path)) { console.error('Error: ' + path + ' does not exist. Please run book:build first.'); process.exit(1); } exec('start ' + path, (error) => { if (error) { console.error('Error opening file:', error); process.exit(1); } });\"",
    "book:preview:wsl": "node -e \"const { platform } = require('os'); const { exec } = require('child_process'); const { existsSync } = require('fs'); const path = 'docs/book/index.html'; if (!existsSync(path)) { console.error('Error: ' + path + ' does not exist. Please run book:build first.'); process.exit(1); } const commands = { win32: 'start', darwin: 'open', linux: 'xdg-open' }; const cmd = commands[platform()] || 'xdg-open'; exec(cmd + ' ' + path, (error) => { if (error) { console.error('Error opening file:', error); process.exit(1); } });\"",
    "book:all:win": "npm run docs:api && npm run book:create-summary && npm run book:build:win && npm run book:preview:win",
    "book:all:wsl": "npm run docs:api && npm run book:create-summary && npm run book:build:wsl && npm run book:preview:wsl",
    "reference:all:win": "npm run test:view:win && npm run book:all:win",
    "reference:all:wsl": "npm run test:view:wsl && npm run book:all:wsl",
    "viz:setup": "npm install --save-dev dependency-cruiser",
    "viz:dependencies:dot": "depcruise --no-config --output-type dot \"src/**/*.ts\" \"tests/**/*.ts\" \"examples/**/*.ts\" > docs/CodeViz/dependencies.dot",
    "viz:dependencies:matrix": "depcruise --no-config --output-type html \"src/**/*.ts\" \"tests/**/*.ts\" \"examples/**/*.ts\" > docs/CodeViz/dependencies-matrix.html && start docs/CodeViz/dependencies-matrix.html",
    "viz:dependencies:noconfig:dot": "depcruise --no-config --output-type dot \"src/**/*.ts\" \"tests/**/*.ts\" \"examples/**/*.ts\"  --prefix vscode://file/%CD%/ | dot -Tsvg | npx depcruise-wrap-stream-in-html > docs/CodeViz/dependencies-noconfig-dot.html && start docs/CodeViz/dependencies-noconfig-dot.html",
    "viz:dependencies:noconfig:ddot": "depcruise --no-config --output-type ddot \"src/**/*.ts\" \"tests/**/*.ts\" \"examples/**/*.ts\"  --prefix vscode://file/%CD%/ | dot -Tsvg | npx depcruise-wrap-stream-in-html > docs/CodeViz/dependencies-noconfig-ddot.html && start docs/CodeViz/dependencies-noconfig-ddot.html",
    "viz:dependencies:stream:dot": "depcruise --config .dependency-cruiser.js --output-type dot \"src/**/*.ts\" \"tests/**/*.ts\" \"examples/**/*.ts\" --prefix \"vscode://file/%CD%/\" | dot -Tsvg | npx depcruise-wrap-stream-in-html > docs/CodeViz/dependencies-dot-stream.html",
    "viz:dependencies:stream:ddot": "depcruise --config .dependency-cruiser.js --output-type ddot \"src/**/*.ts\" \"tests/**/*.ts\" \"examples/**/*.ts\" --prefix \"vscode://file/%CD%/\" | dot -Tsvg | npx depcruise-wrap-stream-in-html > docs/CodeViz/dependencies-ddot-stream.html",
    "viz:dependencies:wrap_html:dot": "npm run viz:dependencies:stream:dot && node scripts/wrap-html.js docs/CodeViz/dependencies-dot-stream.html docs/CodeViz/dependencies-dot-wrapped.html && start docs/CodeViz/dependencies-dot-wrapped.html",
    "viz:dependencies:wrap_html:ddot": "npm run viz:dependencies:stream:ddot && node scripts/wrap-html.js docs/CodeViz/dependencies-ddot-stream.html docs/CodeViz/dependencies-ddot-wrapped.html && start docs/CodeViz/dependencies-ddot-wrapped.html",
    "viz:all": "npm run viz:dependencies:dot && npm run viz:dependencies:matrix && npm run viz:dependencies:noconfig:dot && npm run viz:dependencies:noconfig:ddot && npm run viz:dependencies:stream:dot && npm run viz:dependencies:stream:ddot && npm run viz:dependencies:wrap_html:dot && npm run viz:dependencies:wrap_html:ddot",
    "docs:all:win": "npm run reference:all:win && npm run viz:all",
    "docs:all:wsl": "npm run reference:all:wsl && npm run viz:all"
  },
  "keywords": [
    "typescript",
    "design-patterns",
    "gof"
  ],
  "author": "2f0833e717",
  "license": "MIT",
  "devDependencies": {
    "@kazuph/mcp-fetch": "^1.1.3",
    "@modelcontextprotocol/inspector": "^0.8.0",
    "@modelcontextprotocol/sdk": "^1.8.0",
    "@modelcontextprotocol/server-filesystem": "^2025.3.28",
    "@modelcontextprotocol/server-github": "^2025.3.28",
    "@modelcontextprotocol/server-memory": "^0.6.2",
    "@modelcontextprotocol/server-sequential-thinking": "^0.6.2",
    "@types/jest": "^29.5.12",
    "@types/node": "^20.17.19",
    "@typescript-eslint/eslint-plugin": "^8.24.1",
    "@typescript-eslint/parser": "^8.24.1",
    "@viz-js/viz": "^3.12.0",
    "dependency-cruiser": "^16.10.1",
    "eslint-config-prettier": "^10.1.2",
    "eslint-plugin-prettier": "^5.2.3",
    "express": "^5.1.0",
    "graphviz-cli": "^2.0.0",
    "jest": "^29.7.0",
    "prettier": "^3.5.1",
    "puppeteer": "^24.7.1",
    "rimraf": "^5.0.10",
    "serve": "^14.2.4",
    "ts-jest": "^29.3.3",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0",
    "typedoc": "^0.25.7",
    "typedoc-plugin-markdown": "^3.17.1",
    "viz.js": "^2.1.2"
  },
  "dependencies": {
    "tsc": "^2.0.4"
  },
  "directories": {
    "doc": "docs",
    "example": "examples",
    "test": "tests"
  }
}
